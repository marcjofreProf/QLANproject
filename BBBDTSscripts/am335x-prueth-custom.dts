
// This DTS overlay sets up input and output pin for use by  
 // PRU1 via its Enhanced GPIO mode, which will let us access those pins  
 // by writing to R30 bits or reading from R31 bits.  
   
 // Save this file wherever you want (but I recommend /lib/firmware), as  
 // "am335x-prueth-custom.dts".
   
 // Compile with:
 // dtc -O dtb -I dts -o /lib/firmware/am335x-prueth-custom.dtbo -b 0 -@ am335x-prueth-custom.dts  
  
 
 /dts-v1/;  
 /plugin/;  

 
 / {  
   // This determines which boards can use this DTS overlay  
   compatible = "ti,beaglebone", "ti,beaglebone-green", "ti,beaglebone-black";  
   
   // I think part-number is supposed to correspond with the filename,  
   // so we'd save this as "PRU-GPIO-DTS-Qlan-v1-00A0.dts".  
   part-number = "am335x-prueth";  
   
   // This always seems to be 00A0, and all the .dtbo files in /lib/firmware  
   // seem to be named foo-00A0.dtbo, but then are loaded without that suffix.  So
   // for foo-00A0.dtbo we'd do 'echo foo > /sys/devices/bone_capemgr.?/slots'
   version = "custom";
   
   
   // List the pins and resources we'll be using. This table:  
   // http://elinux.org/Ti_AM33XX_PRUSSv2#Beaglebone_PRU_connections_and_modes  
   // shows which pins can be used with PRU0 and PRU1 for input and output via  
   // registers R31 and R30.  
   // Our output pin, P8_27, 28, 29, 30, 39, 40, 41, 42, 43, 44, 45, 46, corresponds to PRU 1
   // Our input pin, P8_15, P8_16, P8_11, P8_12, P9_25, P9_41, P9_27, P9_42, P9_28, P9_29, P9_30 and P_31, corresponds to PRU 0
   //  
   // Beware: Many other PRU EGP pins are reserved by HDMI or onboard flash, which  
   // would need to be disabled first by editing uEnv.txt and rebooting.  
   
   exclusive-use = "P8.15","P8.16", "P8.11", "P8.12","P9.25", "P9.41", "P9.27", "P9.42", "P9.28", "P9.29", "P9.30", "P9.31", "P8.45", "P8.46", "P8.43", "P8.44", "P8.41", "P8.42", "P8.39", "P8.40", "P8.27", "P8.29", "P8.28", "P8.30", "pru0", "pru1";
   
   //model = "TI AM3359 ICE-V2 - dual PRUETH";
	//compatible = "ti,am3359-icev2", "ti,am33xx";

	aliases {
		ethernet0 = &pruss_emac0;
		ethernet1 = &pruss_emac1;
	};

	/* Dual mac ethernet application node on icss */
	pruss_eth {
		//compatible = "ti,am3359-prueth";
		prus = <&pru0>, <&pru1>;
		firmware-name = "ti-pruss/am335x-pru0-prueth-fw.elf",
				"ti-pruss/am335x-pru1-prueth-fw.elf";
		sram = <&ocmcram>;
		interrupt-parent = <&pruss_intc>;
		pinctrl-0 = <&pruss_eth_default>;
		pinctrl-names = "default";

		pruss_emac0: ethernet-mii0 {
			phy-handle = <&pruss_eth0_phy>;
			phy-mode = "mii";
			interrupts = <20>, <22>;
			interrupt-names = "rx", "tx";
			/* Filled in by bootloader */
			local-mac-address = [00 00 00 00 00 00];
		};

		pruss_emac1: ethernet-mii1 {
			phy-handle = <&pruss_eth1_phy>;
			phy-mode = "mii";
			interrupts = <21>, <23>;
			interrupt-names = "rx", "tx";
			/* Filled in by bootloader */
			local-mac-address = [00 00 00 00 00 00];
		};
	};
	
	am33xx_pinmux: pinmux@44e10800 {
		compatible = "pinctrl-single";
		reg = <0x44e10800 0x0238>;
		#address-cells = <1>;
		#size-cells = <0>;
		pinctrl-single,register-width = <32>;
		pinctrl-single,function-mask = <0x7f>;
	};
	
	gpio3: gpio@481ac000 {
			compatible = "ti,omap4-gpio";
			ti,hwmods = "gpio3";
			gpio-controller;
			#gpio-cells = <2>;
			interrupt-controller;
			#interrupt-cells = <1>;
			reg = <0x481ac000 0x1000>;
			interrupts = <32>;
		};
  
 fragment@0 {  
    target = <&am33xx_pinmux>;  
    __overlay__ {  
      example_pins: pinmux_pru_pru_pins {  
       // https://elinux.org/Ti_AM33XX_PRUSSv2#Beaglebone_PRU_connections_and_modes
       // The offset and mode for pins P8_11 and P8_16 also come from the table linked above.
       // 	        Bits 0..2 are the multiplexer mode
       //		Bit 3 enables (0) or disables (1) the internal pullup/pulldown resistor
       //		Bit 4 is 0 for pulldown, 1 for pullup
       //		Bit 5 is 0 to disable input, 1 to enable input.
       //		Bit 6 is 1 if you want slow rise/fall times (for long i2c buses)
        
       pinctrl-single,pins = <          
         0x19C 0x2E      // Mode 6 input non-pull
         0x194 0x2E      // Mode 6 input non-pull
         0x198 0x2E      // Mode 6 input non-pull
         0x190 0x2E      // Mode 6 input non-pull
         0x1A4 0x2E      // Mode 6 input non-pull
         0x1AC 0x2E      // Mode 6 input non-pull
         0x038 0x2E      // Mode 6 input non-pull
         0x03C 0x2E      // Mode 6 input non-pull
         0x1A0 0x2E      // Mode 6 input non-pull
         0x1A8 0x2E      // Mode 6 input non-pull
         0x034 0x2E      // Mode 6 input non-pull
         0x030 0x2E      // Mode 6 input non-pull
         
         0x0E0 0x0D	 // Mode 5 output non-pull
         0x0E4 0x0D	 // Mode 5 output non-pull
         0x0E8 0x0D	 // Mode 5 output non-pull
         0x0EC 0x0D	 // Mode 5 output non-pull
         0x0B8 0x0D	 // Mode 5 output non-pull
         0x0BC 0x0D	 // Mode 5 output non-pull
         0x0B0 0x0D	 // Mode 5 output non-pull
         0x0B4 0x0D	 // Mode 5 output non-pull
         0x0A8 0x0D	 // Mode 5 output non-pull
         0x0AC 0x0D	 // Mode 5 output non-pull
         0x0A0 0x0D	 // Mode 5 output non-pull
	 0x0A4 0x0D	 // Mode 5 output non-pull
	 
       >;  
      };
      
      pruss_mdio_default: pruss_mdio_default {
		pinctrl-single,pins = <
			0x88c 0x0D //AM33XX_IOPAD(0x88c, (PIN_OUTPUT | MUX_MODE5))		gpmc_clk.pr1_mdio_mdclk
			0x888 0x2D //AM33XX_IOPAD(0x888, (PIN_INPUT  | MUX_MODE5))		gpmc_csn3.pr1_mdio_data
			0x89c 0x37 //AM33XX_IOPAD(0x89c, (PIN_INPUT_PULLUP | MUX_MODE7))	gpmc_ben0_cle.gpio2_5
			// disable CPSW MDIO
			0x948 0x37 //AM33XX_IOPAD(0x948, (PIN_INPUT_PULLUP | MUX_MODE7))	mdio_data.gpio0_0
			0x94c 0x37 //AM33XX_IOPAD(0x94c, (PIN_INPUT_PULLUP | MUX_MODE7))	mdio_clk.gpio0_1
		>;
	};

	pruss_eth_default: pruss_eth_default {
		pinctrl-single,pins = <
			0x8a0 0x2A //AM33XX_IOPAD(0x8a0, (PIN_INPUT  | MUX_MODE2))	dss_data0.pr1_mii_mt0_clk
			0x8b4 0x0A //AM33XX_IOPAD(0x8b4, (PIN_OUTPUT | MUX_MODE2))	dss_data5.pr1_mii0_txd0
			0x8b0 0x0A //AM33XX_IOPAD(0x8b0, (PIN_OUTPUT | MUX_MODE2))	dss_data4.pr1_mii0_txd1
			0x8ac 0x0A //AM33XX_IOPAD(0x8ac, (PIN_OUTPUT | MUX_MODE2))	dss_data3.pr1_mii0_txd2
			0x8a8 0x0A //AM33XX_IOPAD(0x8a8, (PIN_OUTPUT | MUX_MODE2))	dss_data2.pr1_mii0_txd3
			0x8cc 0x2D //AM33XX_IOPAD(0x8cc, (PIN_INPUT  | MUX_MODE5))	dss_data11.pr1_mii0_rxd0
			0x8c8 0x2D //AM33XX_IOPAD(0x8c8, (PIN_INPUT  | MUX_MODE5))	dss_data10.pr1_mii0_rxd1
			0x8c4 0x2D //AM33XX_IOPAD(0x8c4, (PIN_INPUT  | MUX_MODE5))	dss_data9.pr1_mii0_rxd2
			0x8c0 0x2D //AM33XX_IOPAD(0x8c0, (PIN_INPUT  | MUX_MODE5))	dss_data8.pr1_mii0_rxd3
			0x8a4 0x0A //AM33XX_IOPAD(0x8a4, (PIN_OUTPUT | MUX_MODE2))	dss_data1.pr1_mii0_txen
			0x8d8 0x2D //AM33XX_IOPAD(0x8d8, (PIN_INPUT  | MUX_MODE5))	dss_data14.pr1_mii_mr0_clk
			0x8dc 0x2D //AM33XX_IOPAD(0x8dc, (PIN_INPUT  | MUX_MODE5))	dss_data15.pr1_mii0_rxdv
			0x8d4 0x2D //AM33XX_IOPAD(0x8d4, (PIN_INPUT  | MUX_MODE5))	dss_data13.pr1_mii0_rxer
			0x8d0 0x2D //AM33XX_IOPAD(0x8d0, (PIN_INPUT  | MUX_MODE5))	dss_data12.pr1_mii0_rxlink
			0x8e8 0x2D //AM33XX_IOPAD(0x8e8, (PIN_INPUT  | MUX_MODE2))	 dss_pclk.pr1_mii0_crs

			0x840 0x2D //AM33XX_IOPAD(0x840, (PIN_INPUT  | MUX_MODE5))	gpmc_a0.pr1_mii_mt1_clk
			0x850 0x0D //AM33XX_IOPAD(0x850, (PIN_OUTPUT | MUX_MODE5))	gpmc_a4.pr1_mii1_txd0
			0x84c 0x0D //AM33XX_IOPAD(0x84c, (PIN_OUTPUT | MUX_MODE5))	gpmc_a3.pr1_mii1_txd1
			0x848 0x0D //AM33XX_IOPAD(0x848, (PIN_OUTPUT | MUX_MODE5))	gpmc_a2.pr1_mii1_txd2
			0x844 0x0D //AM33XX_IOPAD(0x844, (PIN_OUTPUT | MUX_MODE5))	gpmc_a1.pr1_mii1_txd3
			0x860 0x2D //AM33XX_IOPAD(0x860, (PIN_INPUT  | MUX_MODE5))	gpmc_a8.pr1_mii1_rxd0
			0x85c 0x2D //AM33XX_IOPAD(0x85c, (PIN_INPUT  | MUX_MODE5))	gpmc_a7.pr1_mii1_rxd1
			0x858 0x2D //AM33XX_IOPAD(0x858, (PIN_INPUT  | MUX_MODE5))	gpmc_a6.pr1_mii1_rxd2
			0x854 0x2D //AM33XX_IOPAD(0x854, (PIN_INPUT  | MUX_MODE5))	gpmc_a5.pr1_mii1_rxd3
			0x874 0x0D //AM33XX_IOPAD(0x874, (PIN_OUTPUT | MUX_MODE5))	gpmc_wpn.pr1_mii1_txen
			0x864 0x2D //AM33XX_IOPAD(0x864, (PIN_INPUT  | MUX_MODE5))	gpmc_a9.pr1_mii_mr1_clk
			0x868 0x2D //AM33XX_IOPAD(0x868, (PIN_INPUT  | MUX_MODE5))	gpmc_a10.pr1_mii1_rxdv
			0x86c 0x2D //AM33XX_IOPAD(0x86c, (PIN_INPUT  | MUX_MODE5))	gpmc_a11.pr1_mii1_rxer
			0x878 0x2D //AM33XX_IOPAD(0x878, (PIN_INPUT  | MUX_MODE5))	gpmc_ben1.pr1_mii1_rxlink
			0x8ec 0x2D //AM33XX_IOPAD(0x8ec, (PIN_INPUT  | MUX_MODE2))	lcd_ac_bias_en.pr1_mii1_crs
			0x870 0x2D //AM33XX_IOPAD(0x870, (PIN_INPUT  | MUX_MODE5))	gpmc_wait0.pr1_mii1_col
		>;
	}; 
    };  
   }; 
     
   // This enables the PRU and assigns the GPIO pins to it for use in EGP mode.  
   fragment@1 {  
    target = <&pruss>;  
    __overlay__ {  
      status = "okay";  
      pinctrl-names = "default";  
      pinctrl-0 = <&example_pins>;  
    };  
   }; 
};  
/*
&gpio3 {
	p4 {
		gpio-hog;
		gpios = <4 0>;
		output-high;
		line-name = "PR1_MII_CTRL";
	};

	p10 {
		gpio-hog;
		gpios = <10 0>;
		// ETH1 mux: Low for MII-PRU, high for RMII-CPSW
		output-low;
		line-name = "MUX_MII_CTL1";
	};
};

&pruss_mdio {
	pinctrl-0 = <&pruss_mdio_default>;
	pinctrl-names = "default";
	reset-gpios = <&gpio2 5 1>;
	reset-delay-us = <2>; // PHY datasheet states 1uS min
	status = "okay";

	pruss_eth0_phy: ethernet-phy@1 {
		 reg = <1>;
	 };

	pruss_eth1_phy: ethernet-phy@3 {
		 reg = <3>;
	 };
};
*/
